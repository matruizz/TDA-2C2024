48 98 779
77 6 996
20 67 257
17 71 511
40 54 3
19 95 120
24 27 208
73 38 686
21 76 239
24 55 585
10 75 583
87 46 52
5 10 167
25 35 116
85 31 581
59 49 777
18 37 673
49 26 317
88 92 526
87 99 715
72 63 68
54 42 543
35 28 37
87 25 754
95 51 785
38 62 164
61 67 330
46 38 49
0 55 25
40 96 928
1 29 426
69 92 832
22 86 909
79 48 480
15 89 88
71 16 145
27 42 22
56 20 904
39 85 919
51 23 726
37 17 301
42 67 180
42 52 249
73 85 636
8 64 733
36 99 414
71 15 146
47 75 973
42 67 851
66 54 134
2 20 580
29 41 744
49 71 120
81 3 7
11 46 422
36 96 570
88 81 166
12 64 934
33 80 369
34 74 508
69 79 965
5 77 233
23 93 525
89 67 685
14 83 718
71 65 375
99 54 429
16 71 34
97 29 794
32 16 539
88 98 880
38 26 648
69 15 891
3 6 9
40 4 477
62 45 330
24 74 151
80 53 680
27 20 909
95 75 341
43 98 375
46 53 362
83 82 174
20 94 45
52 53 505
18 56 311
23 23 501
11 45 272
63 91 952
89 4 435
98 16 801
21 21 245
69 71 467
21 65 270
46 92 204
52 57 69
87 15 406
20 97 355
b 115
r
clear
b 120
r
#include <bits/stdc++.h>
#include <limits>
using namespace std;
typedef long long ll;
//Main
ll n, m, u, v, w;
long long int inf = std::numeric_limits<long long int>::max();
//             u,              v,  w
unordered_map<ll, vector<pair<ll, ll> > > adj;
vector<tuple<ll, ll, ll>> lAdj;
unordered_set<ll> s;
unordered_set<ll> V;
vector<ll> pi;
vector<ll> pred;
ll cantCaminMin = 1;
ll res;
unordered_set<ll> aux;
void dijktra(ll &v){
    pi.assign(n, inf);      //Vector de distancias de camino minimo por vertice
    pred.assign(n, inf);    //Predecesores
    s.insert(v);            //Conjunto de vertices visitados
    pi[v] = 0;
    pred[v] = v;
    w = v;  //Vertice que no esta en s y es el indice del minimo valor en pi
    for (pair<ll, ll> e: adj[v])    //Recorro los adyacentes a v    O(vecinos de v)
    {
        //Si es una arista multiple escribo en pi solo si tiene un peso menor que la anterior
        if ((pi[e.first] > e.second) && (e.first != v))
        {
            pi[e.first] = e.second;
            pred[e.first] = v;
        }
    }
    //&& (pi[w] < inf) Guarda por si el grafo sea disconexo CREO!
    while ((s != aux) && (pi[w] < inf)) //O(N)
    {
        ll piw = inf;
        //Busco el indice i de pi que minimice pi[i] y el indice no este en s
        for (ll i = 0; i < n; i++)  //O(N)
        {
            if ((s.find(i) == s.end()) && (pi[i] < piw))
            {
                piw = pi[i];    //Menor distancia de un nodo que aun no fue procesado a la raiz 
                w = i;          //Nodo de menor que aun no fue procesado de menor distancia a la raiz
            }
        }
        s.insert(w);    //O(1)  Meto al nodo al conjunto de procesados
        for (pair<ll, ll> e: adj[w])    //O(vecinosDe(w))
        {
            //Si no es un loop y la distancia del adyacante a w es mayor que la distancia si se viniera de w
            if ((e.first != w) && (pi[e.first] > pi[w] + e.second))
            {
                pi[e.first] = pi[w] + e.second;
                pred[e.first] = w;
            }
        }
    }
    
    s.clear();  //O(n)
    return;
}
int main() {
    //Codigo para hacer la entrada y salida de datos mas eficiente
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    lAdj.assign(m, {});
    res = 0;
    for (ll i = 0; i < n; i++)
    {
        aux.insert(i);
    }
    
    for (ll i = 0; i < m; i++)
    {
        cin >> u >> v >> w;
        adj[u].push_back(make_pair(v, w));
        adj[v].push_back(make_pair(u, w));
        lAdj[i] = make_tuple(u, v, w);
        /*
        if (u < v)
        {
            lAdj[i] = make_tuple(u, v, w);
        }else if(v < u){
            lAdj[i] = make_tuple(v, u, w);
        }else{
            lAdj[i] = make_tuple(u, v, w);
        }*/
        
    }
    ll v = 0;
    dijktra(v);
    vector<ll> piDe0AN = pi;
    v = (n - 1);
    dijktra(v);
    for (ll i = 0; i < m; i++)  //O(m)
    {
        if ( ( std::get<0>(lAdj[i]) != std::get<1>(lAdj[i]) ) && ( (piDe0AN[std::get<0>(lAdj[i])] + std::get<2>(lAdj[i]) + pi[std::get<1>(lAdj[i])]) == pi[0] ) )
        {
            res = res + (std::get<2>(lAdj[i]) * 2);
        }
    }
   
    
    cout << res << "\n";
    
b 116
r
n
p s
clear
b 122
r
p piDe0AN 
p d
p pi
b 99
r
p piDe0AN 
p d
r
b 24
r
p pi
n
c
p pi
n
p pi
b 94
c
p pi
p piDe0AN 
b 122
r
p piDe0AN 
p d
b 137
r
p piDe0AN 
p d
b 99
r
p piDe0AN 
p d
p lAdj 
n
n
n
n
n
n
n
